{"ast":null,"code":"var _s = $RefreshSig$();\n// GameFunctions.ts\nimport { useState, useEffect } from 'react';\nimport Words from './Words'; // Adjust the path as necessary\n\nexport function useGameLogic() {\n  _s();\n  const [page, setPage] = useState('home');\n  const [category, setCategory] = useState('');\n  const [word, setWord] = useState('');\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [health, setHealth] = useState(100);\n  const [menuOpen, setMenuOpen] = useState(false); // Include setMenuOpen state\n  const [gameOver, setGameOver] = useState(false);\n  const [lostWord, setLostWord] = useState('');\n  const [hasWon, setHasWon] = useState(false);\n  const selectCategory = category => {\n    setCategory(category);\n    const words = Words[category];\n    const randomWord = words[Math.floor(Math.random() * words.length)];\n    setWord(randomWord.replace(/_/g, ' '));\n    setGuessedLetters([]);\n    setHealth(100);\n    setPage('game');\n  };\n  const handleGuess = letter => {\n    if (guessedLetters.includes(letter) || gameOver || hasWon) return;\n    setGuessedLetters([...guessedLetters, letter]);\n    if (!word.includes(letter)) {\n      setHealth(health - 100 / 6);\n      if (health - 100 / 6 <= 0) {\n        setGameOver(true);\n        setLostWord(word);\n      }\n    }\n  };\n  useEffect(() => {\n    if (word && word.split('').every(letter => letter === ' ' || guessedLetters.includes(letter))) {\n      setHasWon(true);\n    }\n  }, [guessedLetters, word]);\n  const goToHome = () => {\n    setPage('home');\n    setMenuOpen(false);\n    setGameOver(false);\n    setHasWon(false);\n  };\n  const changeCategory = () => {\n    setPage('category');\n    setMenuOpen(false);\n    setGameOver(false);\n    setHasWon(false);\n  };\n  const continueGame = () => {\n    setMenuOpen(false);\n  };\n  const quitGame = () => {\n    setPage('home');\n    setMenuOpen(false);\n    setGameOver(false);\n    setHasWon(false);\n  };\n  const playAgain = () => {\n    setWord('');\n    setGuessedLetters([]);\n    setHealth(100);\n    setGameOver(false);\n    setHasWon(false);\n    setPage('category');\n  };\n  return {\n    category,\n    word,\n    guessedLetters,\n    health,\n    menuOpen,\n    setMenuOpen,\n    // Ensure setMenuOpen is returned\n    gameOver,\n    lostWord,\n    hasWon,\n    selectCategory,\n    handleGuess,\n    goToHome,\n    changeCategory,\n    continueGame,\n    quitGame,\n    playAgain,\n    setPage\n  };\n}\n_s(useGameLogic, \"wcWXfJN3FMw9rBE1ml4Ooiaj+GY=\");","map":{"version":3,"names":["useState","useEffect","Words","useGameLogic","_s","page","setPage","category","setCategory","word","setWord","guessedLetters","setGuessedLetters","health","setHealth","menuOpen","setMenuOpen","gameOver","setGameOver","lostWord","setLostWord","hasWon","setHasWon","selectCategory","words","randomWord","Math","floor","random","length","replace","handleGuess","letter","includes","split","every","goToHome","changeCategory","continueGame","quitGame","playAgain"],"sources":["C:/software/Frontend Mentor/hangman-ts/src/components/GameFunctions.ts"],"sourcesContent":["// GameFunctions.ts\r\nimport { useState, useEffect } from 'react';\r\nimport Words from './Words'; // Adjust the path as necessary\r\n\r\nexport function useGameLogic() {\r\n  const [page, setPage] = useState<string>('home');\r\n  const [category, setCategory] = useState<string>('');\r\n  const [word, setWord] = useState<string>('');\r\n  const [guessedLetters, setGuessedLetters] = useState<string[]>([]);\r\n  const [health, setHealth] = useState<number>(100);\r\n  const [menuOpen, setMenuOpen] = useState<boolean>(false); // Include setMenuOpen state\r\n  const [gameOver, setGameOver] = useState<boolean>(false);\r\n  const [lostWord, setLostWord] = useState<string>('');\r\n  const [hasWon, setHasWon] = useState<boolean>(false);\r\n\r\n  const selectCategory = (category: string) => {\r\n    setCategory(category);\r\n    const words = Words[category];\r\n    const randomWord = words[Math.floor(Math.random() * words.length)];\r\n    setWord(randomWord.replace(/_/g, ' '));\r\n    setGuessedLetters([]);\r\n    setHealth(100);\r\n    setPage('game');\r\n  };\r\n\r\n  const handleGuess = (letter: string) => {\r\n    if (guessedLetters.includes(letter) || gameOver || hasWon) return;\r\n    setGuessedLetters([...guessedLetters, letter]);\r\n\r\n    if (!word.includes(letter)) {\r\n      setHealth(health - 100 / 6);\r\n      if (health - 100 / 6 <= 0) {\r\n        setGameOver(true);\r\n        setLostWord(word);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      word &&\r\n      word.split('').every((letter) => letter === ' ' || guessedLetters.includes(letter))\r\n    ) {\r\n      setHasWon(true);\r\n    }\r\n  }, [guessedLetters, word]);\r\n\r\n  const goToHome = () => {\r\n    setPage('home');\r\n    setMenuOpen(false);\r\n    setGameOver(false);\r\n    setHasWon(false);\r\n  };\r\n\r\n  const changeCategory = () => {\r\n    setPage('category');\r\n    setMenuOpen(false);\r\n    setGameOver(false);\r\n    setHasWon(false);\r\n  };\r\n\r\n  const continueGame = () => {\r\n    setMenuOpen(false);\r\n  };\r\n\r\n  const quitGame = () => {\r\n    setPage('home');\r\n    setMenuOpen(false);\r\n    setGameOver(false);\r\n    setHasWon(false);\r\n  };\r\n\r\n  const playAgain = () => {\r\n    setWord('');\r\n    setGuessedLetters([]);\r\n    setHealth(100);\r\n    setGameOver(false);\r\n    setHasWon(false);\r\n    setPage('category');\r\n  };\r\n\r\n  return {\r\n    category,\r\n    word,\r\n    guessedLetters,\r\n    health,\r\n    menuOpen,\r\n    setMenuOpen, // Ensure setMenuOpen is returned\r\n    gameOver,\r\n    lostWord,\r\n    hasWon,\r\n    selectCategory,\r\n    handleGuess,\r\n    goToHome,\r\n    changeCategory,\r\n    continueGame,\r\n    quitGame,\r\n    playAgain,\r\n    setPage,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}