{"ast":null,"code":"var _jsxFileName = \"C:\\\\software\\\\Frontend Mentor\\\\hangman-ts\\\\src\\\\components\\\\HangmanDisplay.tsx\";\nimport React from \"react\";\nimport \"../css/HangmanDisplay.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HangmanDisplay = ({\n  word,\n  guessedLetters\n}) => {\n  const displayWord = word.split(\"\").map((letter, index) => {\n    if (letter === \" \") {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"space\",\n        children: \"\\xA0\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this);\n    }\n    return guessedLetters.includes(letter) ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"letters\",\n      children: letter\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"blank\",\n      children: \"\\xA0\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hangman-display\",\n    children: displayWord\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n_c = HangmanDisplay;\nexport default HangmanDisplay;\nvar _c;\n$RefreshReg$(_c, \"HangmanDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","HangmanDisplay","word","guessedLetters","displayWord","split","map","letter","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","includes","_c","$RefreshReg$"],"sources":["C:/software/Frontend Mentor/hangman-ts/src/components/HangmanDisplay.tsx"],"sourcesContent":["import React from \"react\";\r\nimport \"../css/HangmanDisplay.css\";\r\n\r\ninterface HangmanDisplayProps {\r\n  word: string;\r\n  guessedLetters: string;\r\n}\r\n\r\nconst HangmanDisplay: React.FC<HangmanDisplayProps> = ({\r\n  word,\r\n  guessedLetters,\r\n}) => {\r\n  const displayWord = word.split(\"\").map((letter, index) => {\r\n    if (letter === \" \") {\r\n      return (\r\n        <span key={index} className=\"space\">\r\n          &nbsp;\r\n        </span>\r\n      );\r\n    }\r\n    return guessedLetters.includes(letter) ? (\r\n      <span key={index} className=\"letters\">\r\n        {letter}\r\n      </span>\r\n    ) : (\r\n      <span key={index} className=\"blank\">\r\n        &nbsp;\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return <div className=\"hangman-display\">{displayWord}</div>;\r\n};\r\n\r\nexport default HangmanDisplay;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnC,MAAMC,cAA6C,GAAGA,CAAC;EACrDC,IAAI;EACJC;AACF,CAAC,KAAK;EACJ,MAAMC,WAAW,GAAGF,IAAI,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IACxD,IAAID,MAAM,KAAK,GAAG,EAAE;MAClB,oBACEP,OAAA;QAAkBS,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAEpC,GAFWF,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC;IAEX;IACA,OAAOX,cAAc,CAACY,QAAQ,CAACR,MAAM,CAAC,gBACpCP,OAAA;MAAkBS,SAAS,EAAC,SAAS;MAAAC,QAAA,EAClCH;IAAM,GADEC,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CAAC,gBAEPd,OAAA;MAAkBS,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAEpC,GAFWF,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACP;EACH,CAAC,CAAC;EAEF,oBAAOd,OAAA;IAAKS,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAAEN;EAAW;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC7D,CAAC;AAACE,EAAA,GAxBIf,cAA6C;AA0BnD,eAAeA,cAAc;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}