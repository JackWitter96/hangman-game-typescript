{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Words from './Words';\nexport function useGameLogic(setPage) {\n  _s();\n  const [category, setCategory] = useState('');\n  const [word, setWord] = useState('');\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [health, setHealth] = useState(100);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [lostWord, setLostWord] = useState('');\n  const [hasWon, setHasWon] = useState(false);\n  const selectCategory = category => {\n    setCategory(category);\n    const words = Words[category];\n    const randomWord = words[Math.floor(Math.random() * words.length)];\n    setWord(randomWord.replace(/_/g, ' '));\n    setGuessedLetters([]);\n    setHealth(100);\n    setPage(\"game\");\n  };\n  const handleGuess = letter => {\n    if (guessedLetters.includes(letter) || gameOver || hasWon) return;\n    setGuessedLetters([...guessedLetters, letter]);\n    if (!word.includes(letter)) {\n      setHealth(health - 100 / 6);\n      if (health - 100 / 6 <= 0) {\n        setGameOver(true);\n        setLostWord(word);\n      }\n    }\n  };\n  useEffect(() => {\n    if (word && word.split(\"\").every(letter => letter === ' ' || guessedLetters.includes(letter))) {\n      setHasWon(true);\n    }\n  }, [guessedLetters, word]);\n  const goToHome = () => {\n    setPage(\"home\");\n    setMenuOpen(false);\n    setGameOver(false);\n    setHasWon(false);\n  };\n  const changeCategory = () => {\n    setPage(\"category\");\n    setMenuOpen(false);\n    setGameOver(false);\n    setHasWon(false);\n  };\n  const continueGame = () => {\n    setMenuOpen(false);\n  };\n  const quitGame = () => {\n    setPage(\"home\");\n    setMenuOpen(false);\n    setGameOver(false);\n    setHasWon(false);\n  };\n  const playAgain = () => {\n    setWord(\"\");\n    setGuessedLetters([]);\n    setHealth(100);\n    setGameOver(false);\n    setHasWon(false);\n    setPage(\"category\");\n  };\n  return {\n    category,\n    word,\n    guessedLetters,\n    health,\n    menuOpen,\n    setMenuOpen,\n    gameOver,\n    lostWord,\n    hasWon,\n    selectCategory,\n    handleGuess,\n    goToHome,\n    changeCategory,\n    continueGame,\n    quitGame,\n    playAgain,\n    setPage\n  };\n}\n_s(useGameLogic, \"uZdP7+aTmv2q46qkEyFUYuUtqmc=\");","map":{"version":3,"names":["useState","useEffect","Words","useGameLogic","setPage","_s","category","setCategory","word","setWord","guessedLetters","setGuessedLetters","health","setHealth","menuOpen","setMenuOpen","gameOver","setGameOver","lostWord","setLostWord","hasWon","setHasWon","selectCategory","words","randomWord","Math","floor","random","length","replace","handleGuess","letter","includes","split","every","goToHome","changeCategory","continueGame","quitGame","playAgain"],"sources":["C:/software/Frontend Mentor/hangman-ts/src/components/GameFunctions.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport Words from './Words';\r\n\r\nexport function useGameLogic(setPage: (page: string) => void) {\r\n  const [category, setCategory] = useState<string>('');\r\n  const [word, setWord] = useState<string>('');\r\n  const [guessedLetters, setGuessedLetters] = useState<string[]>([]);\r\n  const [health, setHealth] = useState<number>(100);\r\n  const [menuOpen, setMenuOpen] = useState<boolean>(false);\r\n  const [gameOver, setGameOver] = useState<boolean>(false);\r\n  const [lostWord, setLostWord] = useState<string>('');\r\n  const [hasWon, setHasWon] = useState<boolean>(false);\r\n\r\n  const selectCategory = (category: string) => {\r\n    setCategory(category);\r\n    const words = Words[category];\r\n    const randomWord = words[Math.floor(Math.random() * words.length)];\r\n    setWord(randomWord.replace(/_/g, ' '));\r\n    setGuessedLetters([]);\r\n    setHealth(100);\r\n    setPage(\"game\");\r\n  };\r\n\r\n  const handleGuess = (letter: string) => {\r\n    if (guessedLetters.includes(letter) || gameOver || hasWon) return;\r\n    setGuessedLetters([...guessedLetters, letter]);\r\n\r\n    if (!word.includes(letter)) {\r\n      setHealth(health - 100 / 6);\r\n      if (health - 100 / 6 <= 0) {\r\n        setGameOver(true);\r\n        setLostWord(word);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      word &&\r\n      word.split(\"\").every((letter) => letter === ' ' || guessedLetters.includes(letter))\r\n    ) {\r\n      setHasWon(true);\r\n    }\r\n  }, [guessedLetters, word]);\r\n\r\n  const goToHome = () => {\r\n    setPage(\"home\");\r\n    setMenuOpen(false);\r\n    setGameOver(false);\r\n    setHasWon(false);\r\n  };\r\n\r\n  const changeCategory = () => {\r\n    setPage(\"category\");\r\n    setMenuOpen(false);\r\n    setGameOver(false);\r\n    setHasWon(false);\r\n  };\r\n\r\n  const continueGame = () => {\r\n    setMenuOpen(false);\r\n  };\r\n\r\n  const quitGame = () => {\r\n    setPage(\"home\");\r\n    setMenuOpen(false);\r\n    setGameOver(false);\r\n    setHasWon(false);\r\n  };\r\n\r\n  const playAgain = () => {\r\n    setWord(\"\");\r\n    setGuessedLetters([]);\r\n    setHealth(100);\r\n    setGameOver(false);\r\n    setHasWon(false);\r\n    setPage(\"category\");\r\n  };\r\n\r\n  return {\r\n    category,\r\n    word,\r\n    guessedLetters,\r\n    health,\r\n    menuOpen,\r\n    setMenuOpen,\r\n    gameOver,\r\n    lostWord,\r\n    hasWon,\r\n    selectCategory,\r\n    handleGuess,\r\n    goToHome,\r\n    changeCategory,\r\n    continueGame,\r\n    quitGame,\r\n    playAgain,\r\n    setPage\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}